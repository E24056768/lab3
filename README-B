 1000:

 sort(): 0.000227 seconds
v1/v2 are different.
insertion_sort(): 0.010022 seconds
v1/v2 are the same.

電腦的速度是2GHz 又用sort()跑了 0.000227s  共處理4.54*10^5單元資料  大約等於sort函數的時間複雜度是n log n=3*10^3


電腦的速度是2GHz 又用insertion_sort()跑了 0.010022s  共處理2.004*10^7單元資料  大約等於insertion_sort函數的時間複雜度是n^2=10^6


 10000:

 sort(): 0.002847 seconds
v1/v2 are different.
insertion_sort(): 1.05975 seconds
v1/v2 are the same.

電腦的速度是2GHz 又用sort()跑了0.002847s  共處理5.69*10^6單元資料  大約等於sort函數的時間複雜度是n log n=4*10^4

電腦的速度是2GHz 又用insertion_sort()跑了 1.05975s  共處理2.12*10^9單元資料  大約等於insertion_sort函數的時間複雜度是n^2=10^8

 100000:

sort(): 0.033888 seconds
v1/v2 are different.
insertion_sort(): 104.251 seconds
v1/v2 are the same.


電腦的速度是2GHz 又用sort()跑了 0.033888s  共處理6.78*10^7單元資料  大約等於sort函數的時間複雜度是n log n=5*10^5

電腦的速度是2GHz 又用insertion_sort()跑了 104.251s  共處理2.085*10^11單元資料  大約等於insertion_sort函數的時間複雜度是n^2=10^10


1000000:

sort(): 0.383115 seconds
v1/v2 are different.
insertion_sort(): 10480.6 seconds
v1/v2 are the same.

電腦的速度是2GHz 又用sort()跑了 0.383115s  共處理7.66*10^8單元資料  大約等於sort函數的時間複雜度是n log n=6*10^6

電腦的速度是2GHz 又用insertion_sort()跑了 10480.62s  共處理2.096*10^13單元資料  大約等於insertion_sort函數的時間複雜度是n^2=10^12
